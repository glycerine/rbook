// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package main

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ByteSlice) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_965f3afadc761adf_0 []byte
		zgensym_965f3afadc761adf_0, err = dc.ReadBytes([]byte((*z)))
		(*z) = ByteSlice(zgensym_965f3afadc761adf_0)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z ByteSlice) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ByteSlice) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ByteSlice) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ByteSlice) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_965f3afadc761adf_1 []byte
		if nbs.AlwaysNil || msgp.IsNil(bts) {
			if !nbs.AlwaysNil {
				bts = bts[1:]
			}
			zgensym_965f3afadc761adf_1 = zgensym_965f3afadc761adf_1[:0]
		} else {
			zgensym_965f3afadc761adf_1, bts, err = nbs.ReadBytesBytes(bts, []byte((*z)))

			if err != nil {
				return
			}
		}
		if err != nil {
			return
		}
		(*z) = ByteSlice(zgensym_965f3afadc761adf_1)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ByteSlice) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HashRBook) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields2zgensym_965f3afadc761adf_3 = 5

	// -- templateDecodeMsg starts here--
	var totalEncodedFields2zgensym_965f3afadc761adf_3 uint32
	totalEncodedFields2zgensym_965f3afadc761adf_3, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft2zgensym_965f3afadc761adf_3 := totalEncodedFields2zgensym_965f3afadc761adf_3
	missingFieldsLeft2zgensym_965f3afadc761adf_3 := maxFields2zgensym_965f3afadc761adf_3 - totalEncodedFields2zgensym_965f3afadc761adf_3

	var nextMiss2zgensym_965f3afadc761adf_3 int32 = -1
	var found2zgensym_965f3afadc761adf_3 [maxFields2zgensym_965f3afadc761adf_3]bool
	var curField2zgensym_965f3afadc761adf_3 string

doneWithStruct2zgensym_965f3afadc761adf_3:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft2zgensym_965f3afadc761adf_3 > 0 || missingFieldsLeft2zgensym_965f3afadc761adf_3 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft2zgensym_965f3afadc761adf_3, missingFieldsLeft2zgensym_965f3afadc761adf_3, msgp.ShowFound(found2zgensym_965f3afadc761adf_3[:]), decodeMsgFieldOrder2zgensym_965f3afadc761adf_3)
		if encodedFieldsLeft2zgensym_965f3afadc761adf_3 > 0 {
			encodedFieldsLeft2zgensym_965f3afadc761adf_3--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField2zgensym_965f3afadc761adf_3 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss2zgensym_965f3afadc761adf_3 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss2zgensym_965f3afadc761adf_3 = 0
			}
			for nextMiss2zgensym_965f3afadc761adf_3 < maxFields2zgensym_965f3afadc761adf_3 && (found2zgensym_965f3afadc761adf_3[nextMiss2zgensym_965f3afadc761adf_3] || decodeMsgFieldSkip2zgensym_965f3afadc761adf_3[nextMiss2zgensym_965f3afadc761adf_3]) {
				nextMiss2zgensym_965f3afadc761adf_3++
			}
			if nextMiss2zgensym_965f3afadc761adf_3 == maxFields2zgensym_965f3afadc761adf_3 {
				// filled all the empty fields!
				break doneWithStruct2zgensym_965f3afadc761adf_3
			}
			missingFieldsLeft2zgensym_965f3afadc761adf_3--
			curField2zgensym_965f3afadc761adf_3 = decodeMsgFieldOrder2zgensym_965f3afadc761adf_3[nextMiss2zgensym_965f3afadc761adf_3]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField2zgensym_965f3afadc761adf_3)
		switch curField2zgensym_965f3afadc761adf_3 {
		// -- templateDecodeMsg ends here --

		case "createTm_zid00_tim":
			found2zgensym_965f3afadc761adf_3[0] = true
			z.CreateTm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "bookID_zid01_str":
			found2zgensym_965f3afadc761adf_3[1] = true
			z.BookID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "user_zid02_str":
			found2zgensym_965f3afadc761adf_3[2] = true
			z.User, err = dc.ReadString()
			if err != nil {
				return
			}
		case "host_zid03_str":
			found2zgensym_965f3afadc761adf_3[3] = true
			z.Host, err = dc.ReadString()
			if err != nil {
				return
			}
		case "path_zid04_str":
			found2zgensym_965f3afadc761adf_3[4] = true
			z.Path, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss2zgensym_965f3afadc761adf_3 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HashRBook
var decodeMsgFieldOrder2zgensym_965f3afadc761adf_3 = []string{"createTm_zid00_tim", "bookID_zid01_str", "user_zid02_str", "host_zid03_str", "path_zid04_str"}

var decodeMsgFieldSkip2zgensym_965f3afadc761adf_3 = []bool{false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *HashRBook) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (z.CreateTm.IsZero()) // time.Time, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.BookID) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.User) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Host) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.Path) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *HashRBook) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_965f3afadc761adf_4 [5]bool
	fieldsInUse_zgensym_965f3afadc761adf_5 := z.fieldsNotEmpty(empty_zgensym_965f3afadc761adf_4[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_965f3afadc761adf_5 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'HashRBook'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x48, 0x61, 0x73, 0x68, 0x52, 0x42, 0x6f, 0x6f, 0x6b})
	if err != nil {
		return err
	}

	if !empty_zgensym_965f3afadc761adf_4[0] {
		// write "createTm_zid00_tim"
		err = en.Append(0xb2, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.CreateTm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_4[1] {
		// write "bookID_zid01_str"
		err = en.Append(0xb0, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.BookID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_4[2] {
		// write "user_zid02_str"
		err = en.Append(0xae, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.User)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_4[3] {
		// write "host_zid03_str"
		err = en.Append(0xae, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Host)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_4[4] {
		// write "path_zid04_str"
		err = en.Append(0xae, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Path)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HashRBook) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "createTm_zid00_tim"
		o = append(o, 0xb2, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.CreateTm)
	}

	if !empty[1] {
		// string "bookID_zid01_str"
		o = append(o, 0xb0, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.BookID)
	}

	if !empty[2] {
		// string "user_zid02_str"
		o = append(o, 0xae, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.User)
	}

	if !empty[3] {
		// string "host_zid03_str"
		o = append(o, 0xae, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Host)
	}

	if !empty[4] {
		// string "path_zid04_str"
		o = append(o, 0xae, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Path)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HashRBook) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HashRBook) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields6zgensym_965f3afadc761adf_7 = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields6zgensym_965f3afadc761adf_7 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields6zgensym_965f3afadc761adf_7, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft6zgensym_965f3afadc761adf_7 := totalEncodedFields6zgensym_965f3afadc761adf_7
	missingFieldsLeft6zgensym_965f3afadc761adf_7 := maxFields6zgensym_965f3afadc761adf_7 - totalEncodedFields6zgensym_965f3afadc761adf_7

	var nextMiss6zgensym_965f3afadc761adf_7 int32 = -1
	var found6zgensym_965f3afadc761adf_7 [maxFields6zgensym_965f3afadc761adf_7]bool
	var curField6zgensym_965f3afadc761adf_7 string

doneWithStruct6zgensym_965f3afadc761adf_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_965f3afadc761adf_7 > 0 || missingFieldsLeft6zgensym_965f3afadc761adf_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_965f3afadc761adf_7, missingFieldsLeft6zgensym_965f3afadc761adf_7, msgp.ShowFound(found6zgensym_965f3afadc761adf_7[:]), unmarshalMsgFieldOrder6zgensym_965f3afadc761adf_7)
		if encodedFieldsLeft6zgensym_965f3afadc761adf_7 > 0 {
			encodedFieldsLeft6zgensym_965f3afadc761adf_7--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField6zgensym_965f3afadc761adf_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_965f3afadc761adf_7 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss6zgensym_965f3afadc761adf_7 = 0
			}
			for nextMiss6zgensym_965f3afadc761adf_7 < maxFields6zgensym_965f3afadc761adf_7 && (found6zgensym_965f3afadc761adf_7[nextMiss6zgensym_965f3afadc761adf_7] || unmarshalMsgFieldSkip6zgensym_965f3afadc761adf_7[nextMiss6zgensym_965f3afadc761adf_7]) {
				nextMiss6zgensym_965f3afadc761adf_7++
			}
			if nextMiss6zgensym_965f3afadc761adf_7 == maxFields6zgensym_965f3afadc761adf_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_965f3afadc761adf_7
			}
			missingFieldsLeft6zgensym_965f3afadc761adf_7--
			curField6zgensym_965f3afadc761adf_7 = unmarshalMsgFieldOrder6zgensym_965f3afadc761adf_7[nextMiss6zgensym_965f3afadc761adf_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_965f3afadc761adf_7)
		switch curField6zgensym_965f3afadc761adf_7 {
		// -- templateUnmarshalMsg ends here --

		case "createTm_zid00_tim":
			found6zgensym_965f3afadc761adf_7[0] = true
			z.CreateTm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "bookID_zid01_str":
			found6zgensym_965f3afadc761adf_7[1] = true
			z.BookID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "user_zid02_str":
			found6zgensym_965f3afadc761adf_7[2] = true
			z.User, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "host_zid03_str":
			found6zgensym_965f3afadc761adf_7[3] = true
			z.Host, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "path_zid04_str":
			found6zgensym_965f3afadc761adf_7[4] = true
			z.Path, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_965f3afadc761adf_7 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HashRBook
var unmarshalMsgFieldOrder6zgensym_965f3afadc761adf_7 = []string{"createTm_zid00_tim", "bookID_zid01_str", "user_zid02_str", "host_zid03_str", "path_zid04_str"}

var unmarshalMsgFieldSkip6zgensym_965f3afadc761adf_7 = []bool{false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HashRBook) Msgsize() (s int) {
	s = 1 + 19 + msgp.TimeSize + 17 + msgp.StringPrefixSize + len(z.BookID) + 15 + msgp.StringPrefixSize + len(z.User) + 15 + msgp.StringPrefixSize + len(z.Host) + 15 + msgp.StringPrefixSize + len(z.Path)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HashRElem) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields8zgensym_965f3afadc761adf_9 = 11

	// -- templateDecodeMsg starts here--
	var totalEncodedFields8zgensym_965f3afadc761adf_9 uint32
	totalEncodedFields8zgensym_965f3afadc761adf_9, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft8zgensym_965f3afadc761adf_9 := totalEncodedFields8zgensym_965f3afadc761adf_9
	missingFieldsLeft8zgensym_965f3afadc761adf_9 := maxFields8zgensym_965f3afadc761adf_9 - totalEncodedFields8zgensym_965f3afadc761adf_9

	var nextMiss8zgensym_965f3afadc761adf_9 int32 = -1
	var found8zgensym_965f3afadc761adf_9 [maxFields8zgensym_965f3afadc761adf_9]bool
	var curField8zgensym_965f3afadc761adf_9 string

doneWithStruct8zgensym_965f3afadc761adf_9:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft8zgensym_965f3afadc761adf_9 > 0 || missingFieldsLeft8zgensym_965f3afadc761adf_9 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft8zgensym_965f3afadc761adf_9, missingFieldsLeft8zgensym_965f3afadc761adf_9, msgp.ShowFound(found8zgensym_965f3afadc761adf_9[:]), decodeMsgFieldOrder8zgensym_965f3afadc761adf_9)
		if encodedFieldsLeft8zgensym_965f3afadc761adf_9 > 0 {
			encodedFieldsLeft8zgensym_965f3afadc761adf_9--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField8zgensym_965f3afadc761adf_9 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss8zgensym_965f3afadc761adf_9 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss8zgensym_965f3afadc761adf_9 = 0
			}
			for nextMiss8zgensym_965f3afadc761adf_9 < maxFields8zgensym_965f3afadc761adf_9 && (found8zgensym_965f3afadc761adf_9[nextMiss8zgensym_965f3afadc761adf_9] || decodeMsgFieldSkip8zgensym_965f3afadc761adf_9[nextMiss8zgensym_965f3afadc761adf_9]) {
				nextMiss8zgensym_965f3afadc761adf_9++
			}
			if nextMiss8zgensym_965f3afadc761adf_9 == maxFields8zgensym_965f3afadc761adf_9 {
				// filled all the empty fields!
				break doneWithStruct8zgensym_965f3afadc761adf_9
			}
			missingFieldsLeft8zgensym_965f3afadc761adf_9--
			curField8zgensym_965f3afadc761adf_9 = decodeMsgFieldOrder8zgensym_965f3afadc761adf_9[nextMiss8zgensym_965f3afadc761adf_9]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField8zgensym_965f3afadc761adf_9)
		switch curField8zgensym_965f3afadc761adf_9 {
		// -- templateDecodeMsg ends here --

		case "type_zid00_rct":
			found8zgensym_965f3afadc761adf_9[0] = true
			{
				var zgensym_965f3afadc761adf_10 int
				zgensym_965f3afadc761adf_10, err = dc.ReadInt()
				z.Typ = HashRTyp(zgensym_965f3afadc761adf_10)
			}
			if err != nil {
				return
			}
		case "tm_zid01_tim":
			found8zgensym_965f3afadc761adf_9[1] = true
			z.Tm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "seqno_zid02_int":
			found8zgensym_965f3afadc761adf_9[2] = true
			z.Seqno, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "cmdJSON_zid03_str":
			found8zgensym_965f3afadc761adf_9[3] = true
			z.CmdJSON, err = dc.ReadString()
			if err != nil {
				return
			}
		case "consoleJSON_zid04_str":
			found8zgensym_965f3afadc761adf_9[4] = true
			z.ConsoleJSON, err = dc.ReadString()
			if err != nil {
				return
			}
		case "imageJSON_zid05_str":
			found8zgensym_965f3afadc761adf_9[5] = true
			z.ImageJSON, err = dc.ReadString()
			if err != nil {
				return
			}
		case "commentJSON_zid06_str":
			found8zgensym_965f3afadc761adf_9[6] = true
			z.CommentJSON, err = dc.ReadString()
			if err != nil {
				return
			}
		case "imageHost_zid07_str":
			found8zgensym_965f3afadc761adf_9[7] = true
			z.ImageHost, err = dc.ReadString()
			if err != nil {
				return
			}
		case "imagePath_zid08_str":
			found8zgensym_965f3afadc761adf_9[8] = true
			z.ImagePath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "imageBy_zid09_bin":
			found8zgensym_965f3afadc761adf_9[9] = true
			z.ImageBy, err = dc.ReadBytes(z.ImageBy)
			if err != nil {
				return
			}
		case "imagePathHash_zid10_str":
			found8zgensym_965f3afadc761adf_9[10] = true
			z.ImagePathHash, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss8zgensym_965f3afadc761adf_9 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HashRElem
var decodeMsgFieldOrder8zgensym_965f3afadc761adf_9 = []string{"type_zid00_rct", "tm_zid01_tim", "seqno_zid02_int", "cmdJSON_zid03_str", "consoleJSON_zid04_str", "imageJSON_zid05_str", "commentJSON_zid06_str", "imageHost_zid07_str", "imagePath_zid08_str", "imageBy_zid09_bin", "imagePathHash_zid10_str"}

var decodeMsgFieldSkip8zgensym_965f3afadc761adf_9 = []bool{false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *HashRElem) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 11
	}
	var fieldsInUse uint32 = 11
	isempty[0] = (z.Typ == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Tm.IsZero()) // time.Time, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Seqno == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.CmdJSON) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.ConsoleJSON) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.ImageJSON) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.CommentJSON) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.ImageHost) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.ImagePath) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (len(z.ImageBy) == 0) // string, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (len(z.ImagePathHash) == 0) // string, omitempty
	if isempty[10] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *HashRElem) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_965f3afadc761adf_11 [11]bool
	fieldsInUse_zgensym_965f3afadc761adf_12 := z.fieldsNotEmpty(empty_zgensym_965f3afadc761adf_11[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_965f3afadc761adf_12 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'HashRElem'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x48, 0x61, 0x73, 0x68, 0x52, 0x45, 0x6c, 0x65, 0x6d})
	if err != nil {
		return err
	}

	if !empty_zgensym_965f3afadc761adf_11[0] {
		// write "type_zid00_rct"
		err = en.Append(0xae, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(int(z.Typ))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_11[1] {
		// write "tm_zid01_tim"
		err = en.Append(0xac, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.Tm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_11[2] {
		// write "seqno_zid02_int"
		err = en.Append(0xaf, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Seqno)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_11[3] {
		// write "cmdJSON_zid03_str"
		err = en.Append(0xb1, 0x63, 0x6d, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CmdJSON)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_11[4] {
		// write "consoleJSON_zid04_str"
		err = en.Append(0xb5, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ConsoleJSON)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_11[5] {
		// write "imageJSON_zid05_str"
		err = en.Append(0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ImageJSON)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_11[6] {
		// write "commentJSON_zid06_str"
		err = en.Append(0xb5, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CommentJSON)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_11[7] {
		// write "imageHost_zid07_str"
		err = en.Append(0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ImageHost)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_11[8] {
		// write "imagePath_zid08_str"
		err = en.Append(0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ImagePath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_11[9] {
		// write "imageBy_zid09_bin"
		err = en.Append(0xb1, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.ImageBy)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_11[10] {
		// write "imagePathHash_zid10_str"
		err = en.Append(0xb7, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ImagePathHash)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HashRElem) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [11]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "type_zid00_rct"
		o = append(o, 0xae, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendInt(o, int(z.Typ))
	}

	if !empty[1] {
		// string "tm_zid01_tim"
		o = append(o, 0xac, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.Tm)
	}

	if !empty[2] {
		// string "seqno_zid02_int"
		o = append(o, 0xaf, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Seqno)
	}

	if !empty[3] {
		// string "cmdJSON_zid03_str"
		o = append(o, 0xb1, 0x63, 0x6d, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CmdJSON)
	}

	if !empty[4] {
		// string "consoleJSON_zid04_str"
		o = append(o, 0xb5, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ConsoleJSON)
	}

	if !empty[5] {
		// string "imageJSON_zid05_str"
		o = append(o, 0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ImageJSON)
	}

	if !empty[6] {
		// string "commentJSON_zid06_str"
		o = append(o, 0xb5, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CommentJSON)
	}

	if !empty[7] {
		// string "imageHost_zid07_str"
		o = append(o, 0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ImageHost)
	}

	if !empty[8] {
		// string "imagePath_zid08_str"
		o = append(o, 0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ImagePath)
	}

	if !empty[9] {
		// string "imageBy_zid09_bin"
		o = append(o, 0xb1, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.ImageBy)
	}

	if !empty[10] {
		// string "imagePathHash_zid10_str"
		o = append(o, 0xb7, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ImagePathHash)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HashRElem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HashRElem) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields13zgensym_965f3afadc761adf_14 = 11

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields13zgensym_965f3afadc761adf_14 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields13zgensym_965f3afadc761adf_14, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft13zgensym_965f3afadc761adf_14 := totalEncodedFields13zgensym_965f3afadc761adf_14
	missingFieldsLeft13zgensym_965f3afadc761adf_14 := maxFields13zgensym_965f3afadc761adf_14 - totalEncodedFields13zgensym_965f3afadc761adf_14

	var nextMiss13zgensym_965f3afadc761adf_14 int32 = -1
	var found13zgensym_965f3afadc761adf_14 [maxFields13zgensym_965f3afadc761adf_14]bool
	var curField13zgensym_965f3afadc761adf_14 string

doneWithStruct13zgensym_965f3afadc761adf_14:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft13zgensym_965f3afadc761adf_14 > 0 || missingFieldsLeft13zgensym_965f3afadc761adf_14 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft13zgensym_965f3afadc761adf_14, missingFieldsLeft13zgensym_965f3afadc761adf_14, msgp.ShowFound(found13zgensym_965f3afadc761adf_14[:]), unmarshalMsgFieldOrder13zgensym_965f3afadc761adf_14)
		if encodedFieldsLeft13zgensym_965f3afadc761adf_14 > 0 {
			encodedFieldsLeft13zgensym_965f3afadc761adf_14--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField13zgensym_965f3afadc761adf_14 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss13zgensym_965f3afadc761adf_14 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss13zgensym_965f3afadc761adf_14 = 0
			}
			for nextMiss13zgensym_965f3afadc761adf_14 < maxFields13zgensym_965f3afadc761adf_14 && (found13zgensym_965f3afadc761adf_14[nextMiss13zgensym_965f3afadc761adf_14] || unmarshalMsgFieldSkip13zgensym_965f3afadc761adf_14[nextMiss13zgensym_965f3afadc761adf_14]) {
				nextMiss13zgensym_965f3afadc761adf_14++
			}
			if nextMiss13zgensym_965f3afadc761adf_14 == maxFields13zgensym_965f3afadc761adf_14 {
				// filled all the empty fields!
				break doneWithStruct13zgensym_965f3afadc761adf_14
			}
			missingFieldsLeft13zgensym_965f3afadc761adf_14--
			curField13zgensym_965f3afadc761adf_14 = unmarshalMsgFieldOrder13zgensym_965f3afadc761adf_14[nextMiss13zgensym_965f3afadc761adf_14]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField13zgensym_965f3afadc761adf_14)
		switch curField13zgensym_965f3afadc761adf_14 {
		// -- templateUnmarshalMsg ends here --

		case "type_zid00_rct":
			found13zgensym_965f3afadc761adf_14[0] = true
			{
				var zgensym_965f3afadc761adf_15 int
				zgensym_965f3afadc761adf_15, bts, err = nbs.ReadIntBytes(bts)

				if err != nil {
					return
				}
				z.Typ = HashRTyp(zgensym_965f3afadc761adf_15)
			}
		case "tm_zid01_tim":
			found13zgensym_965f3afadc761adf_14[1] = true
			z.Tm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "seqno_zid02_int":
			found13zgensym_965f3afadc761adf_14[2] = true
			z.Seqno, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "cmdJSON_zid03_str":
			found13zgensym_965f3afadc761adf_14[3] = true
			z.CmdJSON, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "consoleJSON_zid04_str":
			found13zgensym_965f3afadc761adf_14[4] = true
			z.ConsoleJSON, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "imageJSON_zid05_str":
			found13zgensym_965f3afadc761adf_14[5] = true
			z.ImageJSON, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "commentJSON_zid06_str":
			found13zgensym_965f3afadc761adf_14[6] = true
			z.CommentJSON, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "imageHost_zid07_str":
			found13zgensym_965f3afadc761adf_14[7] = true
			z.ImageHost, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "imagePath_zid08_str":
			found13zgensym_965f3afadc761adf_14[8] = true
			z.ImagePath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "imageBy_zid09_bin":
			found13zgensym_965f3afadc761adf_14[9] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.ImageBy = z.ImageBy[:0]
			} else {
				z.ImageBy, bts, err = nbs.ReadBytesBytes(bts, z.ImageBy)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "imagePathHash_zid10_str":
			found13zgensym_965f3afadc761adf_14[10] = true
			z.ImagePathHash, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss13zgensym_965f3afadc761adf_14 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HashRElem
var unmarshalMsgFieldOrder13zgensym_965f3afadc761adf_14 = []string{"type_zid00_rct", "tm_zid01_tim", "seqno_zid02_int", "cmdJSON_zid03_str", "consoleJSON_zid04_str", "imageJSON_zid05_str", "commentJSON_zid06_str", "imageHost_zid07_str", "imagePath_zid08_str", "imageBy_zid09_bin", "imagePathHash_zid10_str"}

var unmarshalMsgFieldSkip13zgensym_965f3afadc761adf_14 = []bool{false, false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HashRElem) Msgsize() (s int) {
	s = 1 + 15 + msgp.IntSize + 13 + msgp.TimeSize + 16 + msgp.IntSize + 18 + msgp.StringPrefixSize + len(z.CmdJSON) + 22 + msgp.StringPrefixSize + len(z.ConsoleJSON) + 20 + msgp.StringPrefixSize + len(z.ImageJSON) + 22 + msgp.StringPrefixSize + len(z.CommentJSON) + 20 + msgp.StringPrefixSize + len(z.ImageHost) + 20 + msgp.StringPrefixSize + len(z.ImagePath) + 18 + msgp.BytesPrefixSize + len(z.ImageBy) + 24 + msgp.StringPrefixSize + len(z.ImagePathHash)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HashRTyp) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_965f3afadc761adf_16 int
		zgensym_965f3afadc761adf_16, err = dc.ReadInt()
		(*z) = HashRTyp(zgensym_965f3afadc761adf_16)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z HashRTyp) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HashRTyp) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HashRTyp) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HashRTyp) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_965f3afadc761adf_17 int
		zgensym_965f3afadc761adf_17, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = HashRTyp(zgensym_965f3afadc761adf_17)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HashRTyp) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *UnframeError) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_965f3afadc761adf_18 int
		zgensym_965f3afadc761adf_18, err = dc.ReadInt()
		(*z) = UnframeError(zgensym_965f3afadc761adf_18)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z UnframeError) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z UnframeError) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UnframeError) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *UnframeError) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_965f3afadc761adf_19 int
		zgensym_965f3afadc761adf_19, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = UnframeError(zgensym_965f3afadc761adf_19)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z UnframeError) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
