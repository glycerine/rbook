// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package main

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HasherBook) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields1zgensym_965f3afadc761adf_2 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields1zgensym_965f3afadc761adf_2 uint32
	totalEncodedFields1zgensym_965f3afadc761adf_2, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft1zgensym_965f3afadc761adf_2 := totalEncodedFields1zgensym_965f3afadc761adf_2
	missingFieldsLeft1zgensym_965f3afadc761adf_2 := maxFields1zgensym_965f3afadc761adf_2 - totalEncodedFields1zgensym_965f3afadc761adf_2

	var nextMiss1zgensym_965f3afadc761adf_2 int32 = -1
	var found1zgensym_965f3afadc761adf_2 [maxFields1zgensym_965f3afadc761adf_2]bool
	var curField1zgensym_965f3afadc761adf_2 string

doneWithStruct1zgensym_965f3afadc761adf_2:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft1zgensym_965f3afadc761adf_2 > 0 || missingFieldsLeft1zgensym_965f3afadc761adf_2 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft1zgensym_965f3afadc761adf_2, missingFieldsLeft1zgensym_965f3afadc761adf_2, msgp.ShowFound(found1zgensym_965f3afadc761adf_2[:]), decodeMsgFieldOrder1zgensym_965f3afadc761adf_2)
		if encodedFieldsLeft1zgensym_965f3afadc761adf_2 > 0 {
			encodedFieldsLeft1zgensym_965f3afadc761adf_2--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField1zgensym_965f3afadc761adf_2 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss1zgensym_965f3afadc761adf_2 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss1zgensym_965f3afadc761adf_2 = 0
			}
			for nextMiss1zgensym_965f3afadc761adf_2 < maxFields1zgensym_965f3afadc761adf_2 && (found1zgensym_965f3afadc761adf_2[nextMiss1zgensym_965f3afadc761adf_2] || decodeMsgFieldSkip1zgensym_965f3afadc761adf_2[nextMiss1zgensym_965f3afadc761adf_2]) {
				nextMiss1zgensym_965f3afadc761adf_2++
			}
			if nextMiss1zgensym_965f3afadc761adf_2 == maxFields1zgensym_965f3afadc761adf_2 {
				// filled all the empty fields!
				break doneWithStruct1zgensym_965f3afadc761adf_2
			}
			missingFieldsLeft1zgensym_965f3afadc761adf_2--
			curField1zgensym_965f3afadc761adf_2 = decodeMsgFieldOrder1zgensym_965f3afadc761adf_2[nextMiss1zgensym_965f3afadc761adf_2]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField1zgensym_965f3afadc761adf_2)
		switch curField1zgensym_965f3afadc761adf_2 {
		// -- templateDecodeMsg ends here --

		case "elems_zid00_slc":
			found1zgensym_965f3afadc761adf_2[0] = true
			var zgensym_965f3afadc761adf_3 uint32
			zgensym_965f3afadc761adf_3, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Elems) >= int(zgensym_965f3afadc761adf_3) {
				z.Elems = (z.Elems)[:zgensym_965f3afadc761adf_3]
			} else {
				z.Elems = make([]HasherElem, zgensym_965f3afadc761adf_3)
			}
			for zgensym_965f3afadc761adf_0 := range z.Elems {
				err = z.Elems[zgensym_965f3afadc761adf_0].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss1zgensym_965f3afadc761adf_2 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HasherBook
var decodeMsgFieldOrder1zgensym_965f3afadc761adf_2 = []string{"elems_zid00_slc"}

var decodeMsgFieldSkip1zgensym_965f3afadc761adf_2 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *HasherBook) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Elems) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *HasherBook) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_965f3afadc761adf_4 [1]bool
	fieldsInUse_zgensym_965f3afadc761adf_5 := z.fieldsNotEmpty(empty_zgensym_965f3afadc761adf_4[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_965f3afadc761adf_5 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'HasherBook'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x48, 0x61, 0x73, 0x68, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b})
	if err != nil {
		return err
	}

	if !empty_zgensym_965f3afadc761adf_4[0] {
		// write "elems_zid00_slc"
		err = en.Append(0xaf, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Elems)))
		if err != nil {
			return
		}
		for zgensym_965f3afadc761adf_0 := range z.Elems {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Elems[zgensym_965f3afadc761adf_0])
			if err != nil {
				return
			}
			if !dup {
				err = z.Elems[zgensym_965f3afadc761adf_0].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HasherBook) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "elems_zid00_slc"
		o = append(o, 0xaf, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Elems)))
		for zgensym_965f3afadc761adf_0 := range z.Elems {
			o, err = z.Elems[zgensym_965f3afadc761adf_0].MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HasherBook) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HasherBook) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields6zgensym_965f3afadc761adf_7 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields6zgensym_965f3afadc761adf_7 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields6zgensym_965f3afadc761adf_7, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft6zgensym_965f3afadc761adf_7 := totalEncodedFields6zgensym_965f3afadc761adf_7
	missingFieldsLeft6zgensym_965f3afadc761adf_7 := maxFields6zgensym_965f3afadc761adf_7 - totalEncodedFields6zgensym_965f3afadc761adf_7

	var nextMiss6zgensym_965f3afadc761adf_7 int32 = -1
	var found6zgensym_965f3afadc761adf_7 [maxFields6zgensym_965f3afadc761adf_7]bool
	var curField6zgensym_965f3afadc761adf_7 string

doneWithStruct6zgensym_965f3afadc761adf_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_965f3afadc761adf_7 > 0 || missingFieldsLeft6zgensym_965f3afadc761adf_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_965f3afadc761adf_7, missingFieldsLeft6zgensym_965f3afadc761adf_7, msgp.ShowFound(found6zgensym_965f3afadc761adf_7[:]), unmarshalMsgFieldOrder6zgensym_965f3afadc761adf_7)
		if encodedFieldsLeft6zgensym_965f3afadc761adf_7 > 0 {
			encodedFieldsLeft6zgensym_965f3afadc761adf_7--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField6zgensym_965f3afadc761adf_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_965f3afadc761adf_7 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss6zgensym_965f3afadc761adf_7 = 0
			}
			for nextMiss6zgensym_965f3afadc761adf_7 < maxFields6zgensym_965f3afadc761adf_7 && (found6zgensym_965f3afadc761adf_7[nextMiss6zgensym_965f3afadc761adf_7] || unmarshalMsgFieldSkip6zgensym_965f3afadc761adf_7[nextMiss6zgensym_965f3afadc761adf_7]) {
				nextMiss6zgensym_965f3afadc761adf_7++
			}
			if nextMiss6zgensym_965f3afadc761adf_7 == maxFields6zgensym_965f3afadc761adf_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_965f3afadc761adf_7
			}
			missingFieldsLeft6zgensym_965f3afadc761adf_7--
			curField6zgensym_965f3afadc761adf_7 = unmarshalMsgFieldOrder6zgensym_965f3afadc761adf_7[nextMiss6zgensym_965f3afadc761adf_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_965f3afadc761adf_7)
		switch curField6zgensym_965f3afadc761adf_7 {
		// -- templateUnmarshalMsg ends here --

		case "elems_zid00_slc":
			found6zgensym_965f3afadc761adf_7[0] = true
			if nbs.AlwaysNil {
				(z.Elems) = (z.Elems)[:0]
			} else {

				var zgensym_965f3afadc761adf_8 uint32
				zgensym_965f3afadc761adf_8, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Elems) >= int(zgensym_965f3afadc761adf_8) {
					z.Elems = (z.Elems)[:zgensym_965f3afadc761adf_8]
				} else {
					z.Elems = make([]HasherElem, zgensym_965f3afadc761adf_8)
				}
				for zgensym_965f3afadc761adf_0 := range z.Elems {
					bts, err = z.Elems[zgensym_965f3afadc761adf_0].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_965f3afadc761adf_7 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HasherBook
var unmarshalMsgFieldOrder6zgensym_965f3afadc761adf_7 = []string{"elems_zid00_slc"}

var unmarshalMsgFieldSkip6zgensym_965f3afadc761adf_7 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HasherBook) Msgsize() (s int) {
	s = 1 + 16 + msgp.ArrayHeaderSize
	for zgensym_965f3afadc761adf_0 := range z.Elems {
		s += z.Elems[zgensym_965f3afadc761adf_0].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HasherElem) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields9zgensym_965f3afadc761adf_10 = 9

	// -- templateDecodeMsg starts here--
	var totalEncodedFields9zgensym_965f3afadc761adf_10 uint32
	totalEncodedFields9zgensym_965f3afadc761adf_10, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft9zgensym_965f3afadc761adf_10 := totalEncodedFields9zgensym_965f3afadc761adf_10
	missingFieldsLeft9zgensym_965f3afadc761adf_10 := maxFields9zgensym_965f3afadc761adf_10 - totalEncodedFields9zgensym_965f3afadc761adf_10

	var nextMiss9zgensym_965f3afadc761adf_10 int32 = -1
	var found9zgensym_965f3afadc761adf_10 [maxFields9zgensym_965f3afadc761adf_10]bool
	var curField9zgensym_965f3afadc761adf_10 string

doneWithStruct9zgensym_965f3afadc761adf_10:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft9zgensym_965f3afadc761adf_10 > 0 || missingFieldsLeft9zgensym_965f3afadc761adf_10 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft9zgensym_965f3afadc761adf_10, missingFieldsLeft9zgensym_965f3afadc761adf_10, msgp.ShowFound(found9zgensym_965f3afadc761adf_10[:]), decodeMsgFieldOrder9zgensym_965f3afadc761adf_10)
		if encodedFieldsLeft9zgensym_965f3afadc761adf_10 > 0 {
			encodedFieldsLeft9zgensym_965f3afadc761adf_10--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField9zgensym_965f3afadc761adf_10 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss9zgensym_965f3afadc761adf_10 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss9zgensym_965f3afadc761adf_10 = 0
			}
			for nextMiss9zgensym_965f3afadc761adf_10 < maxFields9zgensym_965f3afadc761adf_10 && (found9zgensym_965f3afadc761adf_10[nextMiss9zgensym_965f3afadc761adf_10] || decodeMsgFieldSkip9zgensym_965f3afadc761adf_10[nextMiss9zgensym_965f3afadc761adf_10]) {
				nextMiss9zgensym_965f3afadc761adf_10++
			}
			if nextMiss9zgensym_965f3afadc761adf_10 == maxFields9zgensym_965f3afadc761adf_10 {
				// filled all the empty fields!
				break doneWithStruct9zgensym_965f3afadc761adf_10
			}
			missingFieldsLeft9zgensym_965f3afadc761adf_10--
			curField9zgensym_965f3afadc761adf_10 = decodeMsgFieldOrder9zgensym_965f3afadc761adf_10[nextMiss9zgensym_965f3afadc761adf_10]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField9zgensym_965f3afadc761adf_10)
		switch curField9zgensym_965f3afadc761adf_10 {
		// -- templateDecodeMsg ends here --

		case "type_zid00_rct":
			found9zgensym_965f3afadc761adf_10[0] = true
			{
				var zgensym_965f3afadc761adf_11 int
				zgensym_965f3afadc761adf_11, err = dc.ReadInt()
				z.Typ = HasherTyp(zgensym_965f3afadc761adf_11)
			}
			if err != nil {
				return
			}
		case "tm_zid01_tim":
			found9zgensym_965f3afadc761adf_10[1] = true
			z.Tm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "seqno_zid02_int":
			found9zgensym_965f3afadc761adf_10[2] = true
			z.Seqno, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "cmdJSON_zid03_str":
			found9zgensym_965f3afadc761adf_10[3] = true
			z.CmdJSON, err = dc.ReadString()
			if err != nil {
				return
			}
		case "consoleJSON_zid04_str":
			found9zgensym_965f3afadc761adf_10[4] = true
			z.ConsoleJSON, err = dc.ReadString()
			if err != nil {
				return
			}
		case "imageJSON_zid05_str":
			found9zgensym_965f3afadc761adf_10[5] = true
			z.ImageJSON, err = dc.ReadString()
			if err != nil {
				return
			}
		case "imageBy_zid06_bin":
			found9zgensym_965f3afadc761adf_10[6] = true
			z.ImageBy, err = dc.ReadBytes(z.ImageBy)
			if err != nil {
				return
			}
		case "imagePath_zid07_str":
			found9zgensym_965f3afadc761adf_10[7] = true
			z.ImagePath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "imagePathHash_zid08_str":
			found9zgensym_965f3afadc761adf_10[8] = true
			z.ImagePathHash, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss9zgensym_965f3afadc761adf_10 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HasherElem
var decodeMsgFieldOrder9zgensym_965f3afadc761adf_10 = []string{"type_zid00_rct", "tm_zid01_tim", "seqno_zid02_int", "cmdJSON_zid03_str", "consoleJSON_zid04_str", "imageJSON_zid05_str", "imageBy_zid06_bin", "imagePath_zid07_str", "imagePathHash_zid08_str"}

var decodeMsgFieldSkip9zgensym_965f3afadc761adf_10 = []bool{false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *HasherElem) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 9
	}
	var fieldsInUse uint32 = 9
	isempty[0] = (z.Typ == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Tm.IsZero()) // time.Time, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Seqno == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.CmdJSON) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.ConsoleJSON) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.ImageJSON) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.ImageBy) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.ImagePath) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.ImagePathHash) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *HasherElem) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_965f3afadc761adf_12 [9]bool
	fieldsInUse_zgensym_965f3afadc761adf_13 := z.fieldsNotEmpty(empty_zgensym_965f3afadc761adf_12[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_965f3afadc761adf_13 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'HasherElem'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x48, 0x61, 0x73, 0x68, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d})
	if err != nil {
		return err
	}

	if !empty_zgensym_965f3afadc761adf_12[0] {
		// write "type_zid00_rct"
		err = en.Append(0xae, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(int(z.Typ))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_12[1] {
		// write "tm_zid01_tim"
		err = en.Append(0xac, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.Tm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_12[2] {
		// write "seqno_zid02_int"
		err = en.Append(0xaf, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Seqno)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_12[3] {
		// write "cmdJSON_zid03_str"
		err = en.Append(0xb1, 0x63, 0x6d, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CmdJSON)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_12[4] {
		// write "consoleJSON_zid04_str"
		err = en.Append(0xb5, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ConsoleJSON)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_12[5] {
		// write "imageJSON_zid05_str"
		err = en.Append(0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ImageJSON)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_12[6] {
		// write "imageBy_zid06_bin"
		err = en.Append(0xb1, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.ImageBy)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_12[7] {
		// write "imagePath_zid07_str"
		err = en.Append(0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ImagePath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_12[8] {
		// write "imagePathHash_zid08_str"
		err = en.Append(0xb7, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ImagePathHash)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HasherElem) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [9]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "type_zid00_rct"
		o = append(o, 0xae, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendInt(o, int(z.Typ))
	}

	if !empty[1] {
		// string "tm_zid01_tim"
		o = append(o, 0xac, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.Tm)
	}

	if !empty[2] {
		// string "seqno_zid02_int"
		o = append(o, 0xaf, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Seqno)
	}

	if !empty[3] {
		// string "cmdJSON_zid03_str"
		o = append(o, 0xb1, 0x63, 0x6d, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CmdJSON)
	}

	if !empty[4] {
		// string "consoleJSON_zid04_str"
		o = append(o, 0xb5, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ConsoleJSON)
	}

	if !empty[5] {
		// string "imageJSON_zid05_str"
		o = append(o, 0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ImageJSON)
	}

	if !empty[6] {
		// string "imageBy_zid06_bin"
		o = append(o, 0xb1, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.ImageBy)
	}

	if !empty[7] {
		// string "imagePath_zid07_str"
		o = append(o, 0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ImagePath)
	}

	if !empty[8] {
		// string "imagePathHash_zid08_str"
		o = append(o, 0xb7, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ImagePathHash)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HasherElem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HasherElem) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields14zgensym_965f3afadc761adf_15 = 9

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields14zgensym_965f3afadc761adf_15 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields14zgensym_965f3afadc761adf_15, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft14zgensym_965f3afadc761adf_15 := totalEncodedFields14zgensym_965f3afadc761adf_15
	missingFieldsLeft14zgensym_965f3afadc761adf_15 := maxFields14zgensym_965f3afadc761adf_15 - totalEncodedFields14zgensym_965f3afadc761adf_15

	var nextMiss14zgensym_965f3afadc761adf_15 int32 = -1
	var found14zgensym_965f3afadc761adf_15 [maxFields14zgensym_965f3afadc761adf_15]bool
	var curField14zgensym_965f3afadc761adf_15 string

doneWithStruct14zgensym_965f3afadc761adf_15:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft14zgensym_965f3afadc761adf_15 > 0 || missingFieldsLeft14zgensym_965f3afadc761adf_15 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft14zgensym_965f3afadc761adf_15, missingFieldsLeft14zgensym_965f3afadc761adf_15, msgp.ShowFound(found14zgensym_965f3afadc761adf_15[:]), unmarshalMsgFieldOrder14zgensym_965f3afadc761adf_15)
		if encodedFieldsLeft14zgensym_965f3afadc761adf_15 > 0 {
			encodedFieldsLeft14zgensym_965f3afadc761adf_15--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField14zgensym_965f3afadc761adf_15 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss14zgensym_965f3afadc761adf_15 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss14zgensym_965f3afadc761adf_15 = 0
			}
			for nextMiss14zgensym_965f3afadc761adf_15 < maxFields14zgensym_965f3afadc761adf_15 && (found14zgensym_965f3afadc761adf_15[nextMiss14zgensym_965f3afadc761adf_15] || unmarshalMsgFieldSkip14zgensym_965f3afadc761adf_15[nextMiss14zgensym_965f3afadc761adf_15]) {
				nextMiss14zgensym_965f3afadc761adf_15++
			}
			if nextMiss14zgensym_965f3afadc761adf_15 == maxFields14zgensym_965f3afadc761adf_15 {
				// filled all the empty fields!
				break doneWithStruct14zgensym_965f3afadc761adf_15
			}
			missingFieldsLeft14zgensym_965f3afadc761adf_15--
			curField14zgensym_965f3afadc761adf_15 = unmarshalMsgFieldOrder14zgensym_965f3afadc761adf_15[nextMiss14zgensym_965f3afadc761adf_15]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField14zgensym_965f3afadc761adf_15)
		switch curField14zgensym_965f3afadc761adf_15 {
		// -- templateUnmarshalMsg ends here --

		case "type_zid00_rct":
			found14zgensym_965f3afadc761adf_15[0] = true
			{
				var zgensym_965f3afadc761adf_16 int
				zgensym_965f3afadc761adf_16, bts, err = nbs.ReadIntBytes(bts)

				if err != nil {
					return
				}
				z.Typ = HasherTyp(zgensym_965f3afadc761adf_16)
			}
		case "tm_zid01_tim":
			found14zgensym_965f3afadc761adf_15[1] = true
			z.Tm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "seqno_zid02_int":
			found14zgensym_965f3afadc761adf_15[2] = true
			z.Seqno, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "cmdJSON_zid03_str":
			found14zgensym_965f3afadc761adf_15[3] = true
			z.CmdJSON, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "consoleJSON_zid04_str":
			found14zgensym_965f3afadc761adf_15[4] = true
			z.ConsoleJSON, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "imageJSON_zid05_str":
			found14zgensym_965f3afadc761adf_15[5] = true
			z.ImageJSON, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "imageBy_zid06_bin":
			found14zgensym_965f3afadc761adf_15[6] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.ImageBy = z.ImageBy[:0]
			} else {
				z.ImageBy, bts, err = nbs.ReadBytesBytes(bts, z.ImageBy)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "imagePath_zid07_str":
			found14zgensym_965f3afadc761adf_15[7] = true
			z.ImagePath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "imagePathHash_zid08_str":
			found14zgensym_965f3afadc761adf_15[8] = true
			z.ImagePathHash, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss14zgensym_965f3afadc761adf_15 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HasherElem
var unmarshalMsgFieldOrder14zgensym_965f3afadc761adf_15 = []string{"type_zid00_rct", "tm_zid01_tim", "seqno_zid02_int", "cmdJSON_zid03_str", "consoleJSON_zid04_str", "imageJSON_zid05_str", "imageBy_zid06_bin", "imagePath_zid07_str", "imagePathHash_zid08_str"}

var unmarshalMsgFieldSkip14zgensym_965f3afadc761adf_15 = []bool{false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HasherElem) Msgsize() (s int) {
	s = 1 + 15 + msgp.IntSize + 13 + msgp.TimeSize + 16 + msgp.IntSize + 18 + msgp.StringPrefixSize + len(z.CmdJSON) + 22 + msgp.StringPrefixSize + len(z.ConsoleJSON) + 20 + msgp.StringPrefixSize + len(z.ImageJSON) + 18 + msgp.BytesPrefixSize + len(z.ImageBy) + 20 + msgp.StringPrefixSize + len(z.ImagePath) + 24 + msgp.StringPrefixSize + len(z.ImagePathHash)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HasherTyp) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_965f3afadc761adf_17 int
		zgensym_965f3afadc761adf_17, err = dc.ReadInt()
		(*z) = HasherTyp(zgensym_965f3afadc761adf_17)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z HasherTyp) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HasherTyp) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HasherTyp) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HasherTyp) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_965f3afadc761adf_18 int
		zgensym_965f3afadc761adf_18, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = HasherTyp(zgensym_965f3afadc761adf_18)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HasherTyp) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
