// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package main

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ByteSlice) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_965f3afadc761adf_0 []byte
		zgensym_965f3afadc761adf_0, err = dc.ReadBytes([]byte((*z)))
		(*z) = ByteSlice(zgensym_965f3afadc761adf_0)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z ByteSlice) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteBytes([]byte(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ByteSlice) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ByteSlice) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ByteSlice) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_965f3afadc761adf_1 []byte
		if nbs.AlwaysNil || msgp.IsNil(bts) {
			if !nbs.AlwaysNil {
				bts = bts[1:]
			}
			zgensym_965f3afadc761adf_1 = zgensym_965f3afadc761adf_1[:0]
		} else {
			zgensym_965f3afadc761adf_1, bts, err = nbs.ReadBytesBytes(bts, []byte((*z)))

			if err != nil {
				return
			}
		}
		if err != nil {
			return
		}
		(*z) = ByteSlice(zgensym_965f3afadc761adf_1)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ByteSlice) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HashRBook) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields3zgensym_965f3afadc761adf_4 = 3

	// -- templateDecodeMsg starts here--
	var totalEncodedFields3zgensym_965f3afadc761adf_4 uint32
	totalEncodedFields3zgensym_965f3afadc761adf_4, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft3zgensym_965f3afadc761adf_4 := totalEncodedFields3zgensym_965f3afadc761adf_4
	missingFieldsLeft3zgensym_965f3afadc761adf_4 := maxFields3zgensym_965f3afadc761adf_4 - totalEncodedFields3zgensym_965f3afadc761adf_4

	var nextMiss3zgensym_965f3afadc761adf_4 int32 = -1
	var found3zgensym_965f3afadc761adf_4 [maxFields3zgensym_965f3afadc761adf_4]bool
	var curField3zgensym_965f3afadc761adf_4 string

doneWithStruct3zgensym_965f3afadc761adf_4:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft3zgensym_965f3afadc761adf_4 > 0 || missingFieldsLeft3zgensym_965f3afadc761adf_4 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft3zgensym_965f3afadc761adf_4, missingFieldsLeft3zgensym_965f3afadc761adf_4, msgp.ShowFound(found3zgensym_965f3afadc761adf_4[:]), decodeMsgFieldOrder3zgensym_965f3afadc761adf_4)
		if encodedFieldsLeft3zgensym_965f3afadc761adf_4 > 0 {
			encodedFieldsLeft3zgensym_965f3afadc761adf_4--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField3zgensym_965f3afadc761adf_4 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss3zgensym_965f3afadc761adf_4 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss3zgensym_965f3afadc761adf_4 = 0
			}
			for nextMiss3zgensym_965f3afadc761adf_4 < maxFields3zgensym_965f3afadc761adf_4 && (found3zgensym_965f3afadc761adf_4[nextMiss3zgensym_965f3afadc761adf_4] || decodeMsgFieldSkip3zgensym_965f3afadc761adf_4[nextMiss3zgensym_965f3afadc761adf_4]) {
				nextMiss3zgensym_965f3afadc761adf_4++
			}
			if nextMiss3zgensym_965f3afadc761adf_4 == maxFields3zgensym_965f3afadc761adf_4 {
				// filled all the empty fields!
				break doneWithStruct3zgensym_965f3afadc761adf_4
			}
			missingFieldsLeft3zgensym_965f3afadc761adf_4--
			curField3zgensym_965f3afadc761adf_4 = decodeMsgFieldOrder3zgensym_965f3afadc761adf_4[nextMiss3zgensym_965f3afadc761adf_4]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField3zgensym_965f3afadc761adf_4)
		switch curField3zgensym_965f3afadc761adf_4 {
		// -- templateDecodeMsg ends here --

		case "createTm_zid00_tim":
			found3zgensym_965f3afadc761adf_4[0] = true
			z.CreateTm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "bookID_zid01_str":
			found3zgensym_965f3afadc761adf_4[1] = true
			z.BookID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "elems_zid02_slc":
			found3zgensym_965f3afadc761adf_4[2] = true
			var zgensym_965f3afadc761adf_5 uint32
			zgensym_965f3afadc761adf_5, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Elems) >= int(zgensym_965f3afadc761adf_5) {
				z.Elems = (z.Elems)[:zgensym_965f3afadc761adf_5]
			} else {
				z.Elems = make([]*HashRElem, zgensym_965f3afadc761adf_5)
			}
			for zgensym_965f3afadc761adf_2 := range z.Elems {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					if z.Elems[zgensym_965f3afadc761adf_2] != nil {
						dc.PushAlwaysNil()
						err = z.Elems[zgensym_965f3afadc761adf_2].DecodeMsg(dc)
						if err != nil {
							return
						}
						dc.PopAlwaysNil()
					}
				} else {
					// not Nil, we have something to read

					if z.Elems[zgensym_965f3afadc761adf_2] == nil {
						z.Elems[zgensym_965f3afadc761adf_2] = new(HashRElem)
					}
					dc.DedupIndexEachPtr(z.Elems[zgensym_965f3afadc761adf_2])

					err = z.Elems[zgensym_965f3afadc761adf_2].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss3zgensym_965f3afadc761adf_4 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HashRBook
var decodeMsgFieldOrder3zgensym_965f3afadc761adf_4 = []string{"createTm_zid00_tim", "bookID_zid01_str", "elems_zid02_slc"}

var decodeMsgFieldSkip3zgensym_965f3afadc761adf_4 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *HashRBook) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (z.CreateTm.IsZero()) // time.Time, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.BookID) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Elems) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *HashRBook) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_965f3afadc761adf_6 [3]bool
	fieldsInUse_zgensym_965f3afadc761adf_7 := z.fieldsNotEmpty(empty_zgensym_965f3afadc761adf_6[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_965f3afadc761adf_7 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'HashRBook'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x48, 0x61, 0x73, 0x68, 0x52, 0x42, 0x6f, 0x6f, 0x6b})
	if err != nil {
		return err
	}

	if !empty_zgensym_965f3afadc761adf_6[0] {
		// write "createTm_zid00_tim"
		err = en.Append(0xb2, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.CreateTm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_6[1] {
		// write "bookID_zid01_str"
		err = en.Append(0xb0, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.BookID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_6[2] {
		// write "elems_zid02_slc"
		err = en.Append(0xaf, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Elems)))
		if err != nil {
			return
		}
		for zgensym_965f3afadc761adf_2 := range z.Elems {
			// gPtr.encodeGen():

			if z.Elems[zgensym_965f3afadc761adf_2] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// encodeGen.gBase IDENT

				// record the interface for deduplication
				var dup bool
				dup, err = en.DedupWriteIsDup(z.Elems[zgensym_965f3afadc761adf_2])
				if err != nil {
					return
				}
				if !dup {
					err = z.Elems[zgensym_965f3afadc761adf_2].EncodeMsg(en)
					if err != nil {
						return
					}
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HashRBook) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "createTm_zid00_tim"
		o = append(o, 0xb2, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.CreateTm)
	}

	if !empty[1] {
		// string "bookID_zid01_str"
		o = append(o, 0xb0, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.BookID)
	}

	if !empty[2] {
		// string "elems_zid02_slc"
		o = append(o, 0xaf, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Elems)))
		for zgensym_965f3afadc761adf_2 := range z.Elems {
			// marshalGen.gPtr()

			if z.Elems[zgensym_965f3afadc761adf_2] == nil {
				o = msgp.AppendNil(o)
			} else {
				// hmm.. no en, no place to check en.DedupWriteIsDup(z)

				o, err = z.Elems[zgensym_965f3afadc761adf_2].MarshalMsg(o) // not is.iface, gen/marshal.go:243
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HashRBook) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HashRBook) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields8zgensym_965f3afadc761adf_9 = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields8zgensym_965f3afadc761adf_9 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields8zgensym_965f3afadc761adf_9, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft8zgensym_965f3afadc761adf_9 := totalEncodedFields8zgensym_965f3afadc761adf_9
	missingFieldsLeft8zgensym_965f3afadc761adf_9 := maxFields8zgensym_965f3afadc761adf_9 - totalEncodedFields8zgensym_965f3afadc761adf_9

	var nextMiss8zgensym_965f3afadc761adf_9 int32 = -1
	var found8zgensym_965f3afadc761adf_9 [maxFields8zgensym_965f3afadc761adf_9]bool
	var curField8zgensym_965f3afadc761adf_9 string

doneWithStruct8zgensym_965f3afadc761adf_9:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft8zgensym_965f3afadc761adf_9 > 0 || missingFieldsLeft8zgensym_965f3afadc761adf_9 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft8zgensym_965f3afadc761adf_9, missingFieldsLeft8zgensym_965f3afadc761adf_9, msgp.ShowFound(found8zgensym_965f3afadc761adf_9[:]), unmarshalMsgFieldOrder8zgensym_965f3afadc761adf_9)
		if encodedFieldsLeft8zgensym_965f3afadc761adf_9 > 0 {
			encodedFieldsLeft8zgensym_965f3afadc761adf_9--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField8zgensym_965f3afadc761adf_9 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss8zgensym_965f3afadc761adf_9 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss8zgensym_965f3afadc761adf_9 = 0
			}
			for nextMiss8zgensym_965f3afadc761adf_9 < maxFields8zgensym_965f3afadc761adf_9 && (found8zgensym_965f3afadc761adf_9[nextMiss8zgensym_965f3afadc761adf_9] || unmarshalMsgFieldSkip8zgensym_965f3afadc761adf_9[nextMiss8zgensym_965f3afadc761adf_9]) {
				nextMiss8zgensym_965f3afadc761adf_9++
			}
			if nextMiss8zgensym_965f3afadc761adf_9 == maxFields8zgensym_965f3afadc761adf_9 {
				// filled all the empty fields!
				break doneWithStruct8zgensym_965f3afadc761adf_9
			}
			missingFieldsLeft8zgensym_965f3afadc761adf_9--
			curField8zgensym_965f3afadc761adf_9 = unmarshalMsgFieldOrder8zgensym_965f3afadc761adf_9[nextMiss8zgensym_965f3afadc761adf_9]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField8zgensym_965f3afadc761adf_9)
		switch curField8zgensym_965f3afadc761adf_9 {
		// -- templateUnmarshalMsg ends here --

		case "createTm_zid00_tim":
			found8zgensym_965f3afadc761adf_9[0] = true
			z.CreateTm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "bookID_zid01_str":
			found8zgensym_965f3afadc761adf_9[1] = true
			z.BookID, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "elems_zid02_slc":
			found8zgensym_965f3afadc761adf_9[2] = true
			if nbs.AlwaysNil {
				(z.Elems) = (z.Elems)[:0]
			} else {

				var zgensym_965f3afadc761adf_10 uint32
				zgensym_965f3afadc761adf_10, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Elems) >= int(zgensym_965f3afadc761adf_10) {
					z.Elems = (z.Elems)[:zgensym_965f3afadc761adf_10]
				} else {
					z.Elems = make([]*HashRElem, zgensym_965f3afadc761adf_10)
				}
				for zgensym_965f3afadc761adf_2 := range z.Elems {
					// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.Elems[zgensym_965f3afadc761adf_2]", alias:"HashRElem", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

					// unmarshalGen.gPtr(): we have an IDENT:

					if nbs.AlwaysNil {
						if z.Elems[zgensym_965f3afadc761adf_2] != nil {
							z.Elems[zgensym_965f3afadc761adf_2].UnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != z.Elems[zgensym_965f3afadc761adf_2] {
								z.Elems[zgensym_965f3afadc761adf_2].UnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if z.Elems[zgensym_965f3afadc761adf_2] == nil {
								z.Elems[zgensym_965f3afadc761adf_2] = new(HashRElem)
							}

							bts, err = z.Elems[zgensym_965f3afadc761adf_2].UnmarshalMsg(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss8zgensym_965f3afadc761adf_9 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HashRBook
var unmarshalMsgFieldOrder8zgensym_965f3afadc761adf_9 = []string{"createTm_zid00_tim", "bookID_zid01_str", "elems_zid02_slc"}

var unmarshalMsgFieldSkip8zgensym_965f3afadc761adf_9 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HashRBook) Msgsize() (s int) {
	s = 1 + 19 + msgp.TimeSize + 17 + msgp.StringPrefixSize + len(z.BookID) + 16 + msgp.ArrayHeaderSize
	for zgensym_965f3afadc761adf_2 := range z.Elems {
		if z.Elems[zgensym_965f3afadc761adf_2] == nil {
			s += msgp.NilSize
		} else {
			s += z.Elems[zgensym_965f3afadc761adf_2].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HashRElem) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields11zgensym_965f3afadc761adf_12 = 10

	// -- templateDecodeMsg starts here--
	var totalEncodedFields11zgensym_965f3afadc761adf_12 uint32
	totalEncodedFields11zgensym_965f3afadc761adf_12, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft11zgensym_965f3afadc761adf_12 := totalEncodedFields11zgensym_965f3afadc761adf_12
	missingFieldsLeft11zgensym_965f3afadc761adf_12 := maxFields11zgensym_965f3afadc761adf_12 - totalEncodedFields11zgensym_965f3afadc761adf_12

	var nextMiss11zgensym_965f3afadc761adf_12 int32 = -1
	var found11zgensym_965f3afadc761adf_12 [maxFields11zgensym_965f3afadc761adf_12]bool
	var curField11zgensym_965f3afadc761adf_12 string

doneWithStruct11zgensym_965f3afadc761adf_12:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft11zgensym_965f3afadc761adf_12 > 0 || missingFieldsLeft11zgensym_965f3afadc761adf_12 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft11zgensym_965f3afadc761adf_12, missingFieldsLeft11zgensym_965f3afadc761adf_12, msgp.ShowFound(found11zgensym_965f3afadc761adf_12[:]), decodeMsgFieldOrder11zgensym_965f3afadc761adf_12)
		if encodedFieldsLeft11zgensym_965f3afadc761adf_12 > 0 {
			encodedFieldsLeft11zgensym_965f3afadc761adf_12--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField11zgensym_965f3afadc761adf_12 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss11zgensym_965f3afadc761adf_12 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss11zgensym_965f3afadc761adf_12 = 0
			}
			for nextMiss11zgensym_965f3afadc761adf_12 < maxFields11zgensym_965f3afadc761adf_12 && (found11zgensym_965f3afadc761adf_12[nextMiss11zgensym_965f3afadc761adf_12] || decodeMsgFieldSkip11zgensym_965f3afadc761adf_12[nextMiss11zgensym_965f3afadc761adf_12]) {
				nextMiss11zgensym_965f3afadc761adf_12++
			}
			if nextMiss11zgensym_965f3afadc761adf_12 == maxFields11zgensym_965f3afadc761adf_12 {
				// filled all the empty fields!
				break doneWithStruct11zgensym_965f3afadc761adf_12
			}
			missingFieldsLeft11zgensym_965f3afadc761adf_12--
			curField11zgensym_965f3afadc761adf_12 = decodeMsgFieldOrder11zgensym_965f3afadc761adf_12[nextMiss11zgensym_965f3afadc761adf_12]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField11zgensym_965f3afadc761adf_12)
		switch curField11zgensym_965f3afadc761adf_12 {
		// -- templateDecodeMsg ends here --

		case "type_zid00_rct":
			found11zgensym_965f3afadc761adf_12[0] = true
			{
				var zgensym_965f3afadc761adf_13 int
				zgensym_965f3afadc761adf_13, err = dc.ReadInt()
				z.Typ = HashRTyp(zgensym_965f3afadc761adf_13)
			}
			if err != nil {
				return
			}
		case "tm_zid01_tim":
			found11zgensym_965f3afadc761adf_12[1] = true
			z.Tm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "seqno_zid02_int":
			found11zgensym_965f3afadc761adf_12[2] = true
			z.Seqno, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "cmdJSON_zid03_str":
			found11zgensym_965f3afadc761adf_12[3] = true
			z.CmdJSON, err = dc.ReadString()
			if err != nil {
				return
			}
		case "consoleJSON_zid04_str":
			found11zgensym_965f3afadc761adf_12[4] = true
			z.ConsoleJSON, err = dc.ReadString()
			if err != nil {
				return
			}
		case "imageJSON_zid05_str":
			found11zgensym_965f3afadc761adf_12[5] = true
			z.ImageJSON, err = dc.ReadString()
			if err != nil {
				return
			}
		case "imageHost_zid06_str":
			found11zgensym_965f3afadc761adf_12[6] = true
			z.ImageHost, err = dc.ReadString()
			if err != nil {
				return
			}
		case "imagePath_zid07_str":
			found11zgensym_965f3afadc761adf_12[7] = true
			z.ImagePath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "imageBy_zid08_bin":
			found11zgensym_965f3afadc761adf_12[8] = true
			z.ImageBy, err = dc.ReadBytes(z.ImageBy)
			if err != nil {
				return
			}
		case "imagePathHash_zid09_str":
			found11zgensym_965f3afadc761adf_12[9] = true
			z.ImagePathHash, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss11zgensym_965f3afadc761adf_12 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HashRElem
var decodeMsgFieldOrder11zgensym_965f3afadc761adf_12 = []string{"type_zid00_rct", "tm_zid01_tim", "seqno_zid02_int", "cmdJSON_zid03_str", "consoleJSON_zid04_str", "imageJSON_zid05_str", "imageHost_zid06_str", "imagePath_zid07_str", "imageBy_zid08_bin", "imagePathHash_zid09_str"}

var decodeMsgFieldSkip11zgensym_965f3afadc761adf_12 = []bool{false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *HashRElem) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 10
	}
	var fieldsInUse uint32 = 10
	isempty[0] = (z.Typ == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Tm.IsZero()) // time.Time, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Seqno == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.CmdJSON) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.ConsoleJSON) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.ImageJSON) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.ImageHost) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.ImagePath) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (len(z.ImageBy) == 0) // string, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (len(z.ImagePathHash) == 0) // string, omitempty
	if isempty[9] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *HashRElem) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_965f3afadc761adf_14 [10]bool
	fieldsInUse_zgensym_965f3afadc761adf_15 := z.fieldsNotEmpty(empty_zgensym_965f3afadc761adf_14[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_965f3afadc761adf_15 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'HashRElem'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x48, 0x61, 0x73, 0x68, 0x52, 0x45, 0x6c, 0x65, 0x6d})
	if err != nil {
		return err
	}

	if !empty_zgensym_965f3afadc761adf_14[0] {
		// write "type_zid00_rct"
		err = en.Append(0xae, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(int(z.Typ))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_14[1] {
		// write "tm_zid01_tim"
		err = en.Append(0xac, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.Tm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_14[2] {
		// write "seqno_zid02_int"
		err = en.Append(0xaf, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteInt(z.Seqno)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_14[3] {
		// write "cmdJSON_zid03_str"
		err = en.Append(0xb1, 0x63, 0x6d, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CmdJSON)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_14[4] {
		// write "consoleJSON_zid04_str"
		err = en.Append(0xb5, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ConsoleJSON)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_14[5] {
		// write "imageJSON_zid05_str"
		err = en.Append(0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ImageJSON)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_14[6] {
		// write "imageHost_zid06_str"
		err = en.Append(0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ImageHost)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_14[7] {
		// write "imagePath_zid07_str"
		err = en.Append(0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ImagePath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_14[8] {
		// write "imageBy_zid08_bin"
		err = en.Append(0xb1, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x62, 0x69, 0x6e)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.ImageBy)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_965f3afadc761adf_14[9] {
		// write "imagePathHash_zid09_str"
		err = en.Append(0xb7, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ImagePathHash)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HashRElem) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [10]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "type_zid00_rct"
		o = append(o, 0xae, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendInt(o, int(z.Typ))
	}

	if !empty[1] {
		// string "tm_zid01_tim"
		o = append(o, 0xac, 0x74, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
		o = msgp.AppendTime(o, z.Tm)
	}

	if !empty[2] {
		// string "seqno_zid02_int"
		o = append(o, 0xaf, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Seqno)
	}

	if !empty[3] {
		// string "cmdJSON_zid03_str"
		o = append(o, 0xb1, 0x63, 0x6d, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CmdJSON)
	}

	if !empty[4] {
		// string "consoleJSON_zid04_str"
		o = append(o, 0xb5, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ConsoleJSON)
	}

	if !empty[5] {
		// string "imageJSON_zid05_str"
		o = append(o, 0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ImageJSON)
	}

	if !empty[6] {
		// string "imageHost_zid06_str"
		o = append(o, 0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ImageHost)
	}

	if !empty[7] {
		// string "imagePath_zid07_str"
		o = append(o, 0xb3, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ImagePath)
	}

	if !empty[8] {
		// string "imageBy_zid08_bin"
		o = append(o, 0xb1, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x62, 0x69, 0x6e)
		o = msgp.AppendBytes(o, z.ImageBy)
	}

	if !empty[9] {
		// string "imagePathHash_zid09_str"
		o = append(o, 0xb7, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ImagePathHash)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HashRElem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HashRElem) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields16zgensym_965f3afadc761adf_17 = 10

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields16zgensym_965f3afadc761adf_17 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields16zgensym_965f3afadc761adf_17, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft16zgensym_965f3afadc761adf_17 := totalEncodedFields16zgensym_965f3afadc761adf_17
	missingFieldsLeft16zgensym_965f3afadc761adf_17 := maxFields16zgensym_965f3afadc761adf_17 - totalEncodedFields16zgensym_965f3afadc761adf_17

	var nextMiss16zgensym_965f3afadc761adf_17 int32 = -1
	var found16zgensym_965f3afadc761adf_17 [maxFields16zgensym_965f3afadc761adf_17]bool
	var curField16zgensym_965f3afadc761adf_17 string

doneWithStruct16zgensym_965f3afadc761adf_17:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft16zgensym_965f3afadc761adf_17 > 0 || missingFieldsLeft16zgensym_965f3afadc761adf_17 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft16zgensym_965f3afadc761adf_17, missingFieldsLeft16zgensym_965f3afadc761adf_17, msgp.ShowFound(found16zgensym_965f3afadc761adf_17[:]), unmarshalMsgFieldOrder16zgensym_965f3afadc761adf_17)
		if encodedFieldsLeft16zgensym_965f3afadc761adf_17 > 0 {
			encodedFieldsLeft16zgensym_965f3afadc761adf_17--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField16zgensym_965f3afadc761adf_17 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss16zgensym_965f3afadc761adf_17 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss16zgensym_965f3afadc761adf_17 = 0
			}
			for nextMiss16zgensym_965f3afadc761adf_17 < maxFields16zgensym_965f3afadc761adf_17 && (found16zgensym_965f3afadc761adf_17[nextMiss16zgensym_965f3afadc761adf_17] || unmarshalMsgFieldSkip16zgensym_965f3afadc761adf_17[nextMiss16zgensym_965f3afadc761adf_17]) {
				nextMiss16zgensym_965f3afadc761adf_17++
			}
			if nextMiss16zgensym_965f3afadc761adf_17 == maxFields16zgensym_965f3afadc761adf_17 {
				// filled all the empty fields!
				break doneWithStruct16zgensym_965f3afadc761adf_17
			}
			missingFieldsLeft16zgensym_965f3afadc761adf_17--
			curField16zgensym_965f3afadc761adf_17 = unmarshalMsgFieldOrder16zgensym_965f3afadc761adf_17[nextMiss16zgensym_965f3afadc761adf_17]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField16zgensym_965f3afadc761adf_17)
		switch curField16zgensym_965f3afadc761adf_17 {
		// -- templateUnmarshalMsg ends here --

		case "type_zid00_rct":
			found16zgensym_965f3afadc761adf_17[0] = true
			{
				var zgensym_965f3afadc761adf_18 int
				zgensym_965f3afadc761adf_18, bts, err = nbs.ReadIntBytes(bts)

				if err != nil {
					return
				}
				z.Typ = HashRTyp(zgensym_965f3afadc761adf_18)
			}
		case "tm_zid01_tim":
			found16zgensym_965f3afadc761adf_17[1] = true
			z.Tm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "seqno_zid02_int":
			found16zgensym_965f3afadc761adf_17[2] = true
			z.Seqno, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "cmdJSON_zid03_str":
			found16zgensym_965f3afadc761adf_17[3] = true
			z.CmdJSON, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "consoleJSON_zid04_str":
			found16zgensym_965f3afadc761adf_17[4] = true
			z.ConsoleJSON, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "imageJSON_zid05_str":
			found16zgensym_965f3afadc761adf_17[5] = true
			z.ImageJSON, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "imageHost_zid06_str":
			found16zgensym_965f3afadc761adf_17[6] = true
			z.ImageHost, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "imagePath_zid07_str":
			found16zgensym_965f3afadc761adf_17[7] = true
			z.ImagePath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "imageBy_zid08_bin":
			found16zgensym_965f3afadc761adf_17[8] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.ImageBy = z.ImageBy[:0]
			} else {
				z.ImageBy, bts, err = nbs.ReadBytesBytes(bts, z.ImageBy)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "imagePathHash_zid09_str":
			found16zgensym_965f3afadc761adf_17[9] = true
			z.ImagePathHash, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss16zgensym_965f3afadc761adf_17 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of HashRElem
var unmarshalMsgFieldOrder16zgensym_965f3afadc761adf_17 = []string{"type_zid00_rct", "tm_zid01_tim", "seqno_zid02_int", "cmdJSON_zid03_str", "consoleJSON_zid04_str", "imageJSON_zid05_str", "imageHost_zid06_str", "imagePath_zid07_str", "imageBy_zid08_bin", "imagePathHash_zid09_str"}

var unmarshalMsgFieldSkip16zgensym_965f3afadc761adf_17 = []bool{false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HashRElem) Msgsize() (s int) {
	s = 1 + 15 + msgp.IntSize + 13 + msgp.TimeSize + 16 + msgp.IntSize + 18 + msgp.StringPrefixSize + len(z.CmdJSON) + 22 + msgp.StringPrefixSize + len(z.ConsoleJSON) + 20 + msgp.StringPrefixSize + len(z.ImageJSON) + 20 + msgp.StringPrefixSize + len(z.ImageHost) + 20 + msgp.StringPrefixSize + len(z.ImagePath) + 18 + msgp.BytesPrefixSize + len(z.ImageBy) + 24 + msgp.StringPrefixSize + len(z.ImagePathHash)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *HashRTyp) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_965f3afadc761adf_19 int
		zgensym_965f3afadc761adf_19, err = dc.ReadInt()
		(*z) = HashRTyp(zgensym_965f3afadc761adf_19)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z HashRTyp) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HashRTyp) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HashRTyp) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *HashRTyp) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_965f3afadc761adf_20 int
		zgensym_965f3afadc761adf_20, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = HashRTyp(zgensym_965f3afadc761adf_20)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HashRTyp) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *UnframeError) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_965f3afadc761adf_21 int
		zgensym_965f3afadc761adf_21, err = dc.ReadInt()
		(*z) = UnframeError(zgensym_965f3afadc761adf_21)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z UnframeError) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteInt(int(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z UnframeError) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UnframeError) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *UnframeError) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_965f3afadc761adf_22 int
		zgensym_965f3afadc761adf_22, bts, err = nbs.ReadIntBytes(bts)

		if err != nil {
			return
		}
		(*z) = UnframeError(zgensym_965f3afadc761adf_22)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z UnframeError) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
